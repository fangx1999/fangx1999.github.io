[{"categories":["笔记"],"content":" SELECT target_col*(1-p)+target_col_next*(p-0) median FROM (SELECT target_col, row_number() over( ORDER BY target_col) AS rn, lead(target_col, 1) over( ORDER BY target_col) target_col_next FROM your_table) t1 JOIN (SELECT (count(target_col)+1)/2 mid_index, (count(target_col)+1)*0.5%1 p FROM your_table) t2 ON t1.rn=t2.mid_index 使用 your_table替换为你需要使用的表名，target_col替换为你需要求中位数的字段名 解释 令cnt = count(target_col)，cnt为奇数则中位数取cnt+1/2位置的target_col值， cnt为偶数则中位数为cnt+1/2、1 + cnt+1/2位置target_col值和的均值。 rn = cnt+1/2时，lead函数求得的target_col_next正是1 + cnt+1/2位置的值。 cnt为奇数则 p=0，那么 \\begin{equation*} median = target\\_col \\end{equation*} cnt为偶数则 p=0.5，那么 \\begin{equation*} median=target\\_col*0.5+target\\_col\\_next*0.5 \\end{equation*} ","date":"2023-06-27","objectID":"/2023_06_27_2/:0:0","tags":["Presto"],"title":"Presto求解严格中位数的一种方法","uri":"/2023_06_27_2/"},{"categories":["笔记"],"content":" 当子查询返回的结果中包含 NULL 值时，NOT IN 和 NOT EXISTS 的行为会有所不同。如果子查询中有 NULL 值，NOT IN 会返回空结果，而 NOT EXISTS 则会忽略 NULL 值。 例如，假设我们有两个表格，一个是 orders 表，一个是 products 表。我们想要找出所有没有被下单的产品。如果我们使用 NOT IN，并且 orders 表中有 NULL 值，那么查询可能会返回空结果： SELECT product_id FROM products WHERE product_id NOT IN (SELECT product_id FROM orders) 而如果我们使用 NOT EXISTS，则可以正确地返回结果： SELECT product_id FROM products p WHERE NOT EXISTS(SELECT 1 FROM orders o WHERE o.product_id = p.product_id) ","date":"2023-06-27","objectID":"/2023_06_27_1/:0:0","tags":["MySQL"],"title":"MySQL中NOT IN和NOT EXISTS对NULL值的处理","uri":"/2023_06_27_1/"}]